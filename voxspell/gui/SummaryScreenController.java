package voxspell.gui;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Iterator;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import javafx.scene.input.MouseEvent;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
import javafx.util.Callback;
import javafx.util.Duration;
import voxspell.Config;
import voxspell.VoxSpell;
import voxspell.quiz.QuizResults;
import voxspell.quiz.QuizResults.Result;
import voxspell.quiz.QuizRules;
import voxspell.quiz.WordScore;

public class SummaryScreenController {

	private static final String REWARD_SONG_LOCATION = System.getProperty("user.dir") + "/.Resources/media/milky-chu_-_With_You_And_Icecream_Flying_-_cut.mp3";

	//FXML fields
	@FXML
	private Button playVideo;
	@FXML
	private Label levelLabel;
	@FXML
	private Label scoreLabel;
	@FXML
	private Label streakLabel;
	@FXML
	private Label timeLabel;
	@FXML
	private Label excellent;
	@FXML
	private Label good;
	@FXML
	private Label okay;
	@FXML
	private Label poor;
	@FXML
	private ListView<QuizResults.Result> history;
	
	private Media rewardSong;
	private MediaPlayer rewardSongPlayer;
	

	private ObservableList<Result> resultsList;


	@FXML
	public void handleNextLevel(ActionEvent ae){
		QuizRules.setQuizType("New Quiz");
		QuizRules.setStartLevel(Config.getStartLevel() + 1);
		try {
			QuizRules.setWordListLocation(Config.getWordListLocation());
		} catch (FileNotFoundException e) {
			System.err.println("Error finding wordlsit location");
			e.printStackTrace();
		}
		changeScene("SpellScreen.fxml");
	}

	@FXML
	public void handleRetry(ActionEvent ae){
		QuizRules.setQuizType("New Quiz");
		QuizRules.setStartLevel(Config.getStartLevel());
		try {
			QuizRules.setWordListLocation(Config.getWordListLocation());
		} catch (FileNotFoundException e) {
			System.err.println("Error finding wordlsit location");
			e.printStackTrace();
		}
		changeScene("SpellScreen.fxml");
	}
	
	/**
	 * Handles the action when the user presses the "Main menu" button
	 * @param ae The action event generated by clicking the button.
	 */
	@FXML
	public void handleMainMenu(ActionEvent ae){
		changeScene("MainMenu.fxml");
	}
	
	/**
	 * Handles action for when user presses the "Play video" button. Only available if they scored
	 * over 80% in their quiz. Launches the RewardPlayer screen. @see RewardPlayerController.
	 * @param ae
	 */
	@FXML
	public void handleRewardVideo(ActionEvent ae){
		try {
			Stage stage = new Stage();
			Parent root = FXMLLoader.load(getClass().getResource("RewardPlayer.fxml"));
			Scene scene = new Scene(root);
			stage.setScene(scene);
			stage.hide();
			rewardSongPlayer.pause();
			stage.showAndWait();
			rewardSongPlayer.play();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	//Helper method to change the scene.
	private void changeScene(String fxmlFile){
		rewardSongPlayer.stop();
		Stage primaryStage = VoxSpell.getMainStage();
		try {
			Parent root = FXMLLoader.load(getClass().getResource(fxmlFile));
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			primaryStage.show();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Method used to give the summary screen results from a quiz. Looks at the results
	 * and processes them to create the summary screen view.
	 * @param results
	 */
	public void setResults(QuizResults results){		
		if(results.getScore() > results.answeredSize() * 0.9 & results.getStreak() == results.answeredSize()){
			if(Config.isColourBlindMode()){
				excellent.setTextFill(Color.BLUE);
			}
			excellent.setVisible(true);
		}else if(results.getScore() > results.answeredSize() * 0.7){
			if(Config.isColourBlindMode()){
				good.setTextFill(Color.AQUA);
			}
			good.setVisible(true);
		}else if(results.getScore() > results.answeredSize() * 0.5){
			okay.setVisible(true);
		}else{
			poor.setVisible(true);
		}

		scoreLabel.setText("Score: " + results.getScore());
		streakLabel.setText("Best Streak: " + results.getStreak());
		long timeInSeconds = results.getTime()/1000;
		long mins = timeInSeconds / 60;
		timeInSeconds = timeInSeconds % 60;
		if(timeInSeconds < 10){
			timeLabel.setText("Time: " + mins + ":0" + timeInSeconds);
		}else{
			timeLabel.setText("Time: " + mins + ":" + timeInSeconds);			
		}
		levelLabel.setText("Level: " + results.getLevel());
		if(results.getScore() > results.answeredSize() * 0.8){
			playVideo.setVisible(true);
		}
		history.setCellFactory(new Callback<ListView<Result>, ListCell<Result>>(){

			@Override
			public ListCell<Result> call(ListView<Result> arg0) {
				return new WordCell();
			}

		});

		resultsList = FXCollections.observableArrayList();
		Iterator<Result> resultIt = results.iterator();
		while(resultIt.hasNext()){
			resultsList.add(resultIt.next());
		}
		history.setItems(resultsList);

	}
	
	/**
	 * Handles when the user clicks a word in the history list. It opens a web browser and loads
	 * a web page showing the definition of the highlighted word.
	 * @param me
	 */
	@FXML
	public void handleListClicked(MouseEvent me){
		Result res = history.getSelectionModel().getSelectedItem();
		String word = res.getWord();
		String url = "http://www.dictionary.com/browse/" + word + "?s=t";
		try{
			ProcessBuilder pb = new ProcessBuilder("x-www-browser", url);
			pb.start();
		}catch(IOException e){
			System.err.println("Error opening web browser, check your internet connection");
			e.printStackTrace();
		}
	}
	
	/*
	 * Hidden class to handle logic for filling the list. Colours words depending on
	 * the user's score.
	 */
	private class WordCell extends ListCell<Result>{
		@Override
		protected void updateItem(Result item, boolean empty){
			if(item != null){
			super.updateItem(item, empty);
				if(item.getScore() == WordScore.FirstTry){
					setText(item.getWord() + ":Correct");
					if(Config.isColourBlindMode()){
						setTextFill(Color.BLUE);
					}else{
						setTextFill(Color.GREEN);
					}
				}else if(item.getScore() == WordScore.NotFirstTry){
					setText(item.getWord() + ":Correct (" + item.getAttempts() + ")");
					setTextFill(new Color(1.0, 0.4, 0, 1));
				}else{
					setText(item.getWord() + " :Wrong");
					setTextFill(Color.RED);
				}
			}
		}
	}
	
	@FXML
	public void initialize(){
		rewardSong = new Media("file:///" + REWARD_SONG_LOCATION);
		rewardSongPlayer = new MediaPlayer(rewardSong);
		rewardSongPlayer.setOnEndOfMedia(new Runnable() {
			
			@Override
			public void run() {
				// TODO Auto-generated method stub
				rewardSongPlayer.seek(Duration.ZERO);
			}
		});;
		rewardSongPlayer.play();
	}

}
