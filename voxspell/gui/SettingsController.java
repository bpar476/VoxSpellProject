package voxspell.gui;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.RadioButton;
import javafx.stage.Stage;
import voxspell.VoxSpell;
import voxspell.festival.Festival;

public class SettingsController {

	@FXML
	private RadioButton colourBlindSelector;
	@FXML
	private Button addWordList;
	@FXML
	private Button resetHistory;
	@FXML
	private Button mainMenu;
	@FXML
	private ComboBox<String> voicesBox;
	@FXML
	private ComboBox<File> wordListsBox;
	@FXML
	private ComboBox<String> startDifficultyBox;

	private boolean colourBlind;

	/**
	 * Handles when the user presses the "back to main menu" button.
	 * @param ae
	 */
	@FXML
	public void mainMenuButtonPressed(ActionEvent ae){
		Stage primaryStage = VoxSpell.getMainStage();
		try {
			Parent root = FXMLLoader.load(getClass().getResource("MainMenu.fxml"));
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			primaryStage.show();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@FXML
	public void colourBlindToggled(ActionEvent ae){
		colourBlind = !colourBlind;
	}

	/**
	 * Updates the selectable items in the difficulty level box when a word list is selected.
	 * @param ae action event generated by combo box.
	 */
	@FXML
	public void wordListSelectionMade(ActionEvent ae){
		ObservableList<String> levels = FXCollections.observableArrayList();
		BufferedReader rdr = null;
		try {
			rdr = new BufferedReader(new FileReader(wordListsBox.getValue()));
		} catch (FileNotFoundException e) {
			System.err.println("Error: File: " + wordListsBox.getValue() + " not found");
			return;
		}

		String line = null;
		try {
			while((line = rdr.readLine()) != null){
				if(line.charAt(0) == '%'){
					String[] levelLine = line.split("\\s+");
					levels.add(levelLine[1]);
				}
			}
			rdr.close();
		} catch (IOException e) {
			System.err.println("Error reading file: " + wordListsBox.getValue());
			return;
		}

		startDifficultyBox.setItems(levels);
		startDifficultyBox.getSelectionModel().select(0);
	}
	
	@FXML
	public void confirmPressed(ActionEvent ae){
		//Update config file
		String wordList = wordListsBox.getSelectionModel().getSelectedItem().getName();
		String startLevel = startDifficultyBox.getSelectionModel().getSelectedItem();
		String voice = voicesBox.getSelectionModel().getSelectedItem();

		try {
			File voxspellProp = new File(System.getProperty("user.dir") + "/.Resources/voxspell.prop");
			voxspellProp.delete();
			voxspellProp.createNewFile();
			PrintWriter wr = new PrintWriter(voxspellProp);
			wr.append("startlevel=" + startLevel + "\n");
			wr.append("wordlist=" + wordList + "\n");
			wr.append("colourblind=" + colourBlind + "\n");
			wr.append("voice=" + voice + "\n");
			wr.flush();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//Update festival voice
		if(voicesBox.getSelectionModel().getSelectedItem().equals("New Zealand")){
			Festival.getInstance().kiwiVoice();
		}else if(voicesBox.getSelectionModel().getSelectedItem().equals("American")){
			Festival.getInstance().americanVoice();
		}
		Festival.getInstance().restart();
	}

	/**
	 * Sets up values in combo boxes when scene is loaded.
	 */
	@FXML
	public void initialize(){
		//Set voice combo box items.
		ObservableList<String> voices = FXCollections.observableArrayList();
		voices.add("New Zealand");
		voices.add("American");
		voicesBox.setItems(voices);
		voicesBox.setPromptText("Select a voice for reading words");
		//Set word lists combo box;
		ObservableList<File> wordLists = FXCollections.observableArrayList();
		File wordListDir = new File(System.getProperty("user.dir") + "/.Resources/wordlists");
		for(File wordlist : wordListDir.listFiles()){
			wordLists.add(wordlist);
		}		
		wordListsBox.setItems(wordLists);
		wordListsBox.setPromptText("Select a spelling list");
		//Reads properties file to set default selected values
		BufferedReader rdr = null;
		BufferedReader levelReader = null;
		try {
			rdr = new BufferedReader(new FileReader( new File(System.getProperty("user.dir")+"/.Resources/voxspell.prop")));
			String line;
			while((line = rdr.readLine()) != null){
				String[] property = line.split("=");
				if(property[0].equals("voice")){
					voicesBox.getSelectionModel().select(property[1]);
				}else if(property[0].equals("wordlist")){
					wordListsBox.getSelectionModel().select(new File(System.getProperty("user.dir") + "/.Resources/wordlists/" + property[1]));
					String levelLine = null;
					ObservableList<String> levels = FXCollections.observableArrayList();
					levelReader = new BufferedReader(new FileReader(new File(System.getProperty("user.dir") + "/.Resources/wordlists/" + property[1])));
					while((levelLine = levelReader.readLine()) != null){
						if(levelLine.charAt(0) == '%'){
							String[] splitLev = levelLine.split("\\s+");
							levels.add(splitLev[1]);
						}
					}
					startDifficultyBox.setItems(levels);
				}
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			try {
				rdr.close();
				levelReader.close();
			} catch (IOException e) {
				System.err.println("Unable to close IO streams");
				e.printStackTrace();
			}
		}
		colourBlind = false;
	}
}
