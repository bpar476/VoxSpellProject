package voxspell.gui;

import java.io.IOException;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;
import voxspell.VoxSpell;
import voxspell.festival.Festival;
import voxspell.quiz.DummyQuiz;
import voxspell.quiz.NewQuiz;
import voxspell.quiz.QuizResults;
import voxspell.quiz.QuizRules;

public class SpellScreenController {

	//functional fields
	private boolean inQuiz;
	private NewQuiz quiz;
	private int wordUpTo;
	private int score;
	private int streak;
	private int highStreak;
	private Long startTime;
	private Long endTime;
	private QuizResults results;

	//FXML fields
	@FXML
	private Button startSubmit;
	@FXML
	private Button speakAgain;
	@FXML
	private Button mainMenu;
	@FXML
	private TextField spellZone;
	@FXML
	private Label quizTypeLabel;
	@FXML
	private Label levelLabel;
	@FXML
	private Label correct;
	@FXML
	private Label incorrect;
	@FXML
	private Label progressLabel;
	@FXML
	private Label spellListLabel;
	@FXML
	private Label streakLabel;
	@FXML
	private Label scoreLabel;
	@FXML
	private Label previousEnterLabel;

	/**
	 * Handles when the start quiz or submit button is pressed. Takes the entered word and uses the quiz to check its correctness.
	 * Updates labels.
	 * @param ae
	 */
	@FXML
	public void	handleStartSubmitButtonPressed(ActionEvent ae){
		if(!inQuiz){
			Festival.FestivalService serv = Festival.getInstance();
			progressLabel.setText("Word 1/10");
			wordUpTo = 1;
			serv.announce("Starting new quiz");
			serv.restart();
			speakAgain.setDisable(false);
			spellZone.setDisable(false);
			inQuiz = true;
			startSubmit.setText("Submit");
			quiz = new NewQuiz();
			quiz.speakWord();
			startTime = System.currentTimeMillis();
		}else{
			String answer = spellZone.getText();
			if(answer.equals("")){
				return;
			}
			submit(answer);
		}
		spellZone.requestFocus();
	}

	/**
	 * Used to submit the user's effort when they press a key (only matters for Enter).
	 * @param ke keyboard event generated when a key is pressed.
	 */
	@FXML
	public void handleEnterPressed(KeyEvent ke){
		if(inQuiz){
			if(ke.getCode() == KeyCode.ENTER){
				String answer = spellZone.getText();
				if(answer.equals("")){
					return;
				}
				submit(answer);
				spellZone.setText("");
			}
		}
	}

	/**
	 * Method to handle when the "Say again" button is pressed
	 * @param ae action event generated by button being clicked.
	 */
	@FXML
	public void handleSayAgainPressed(){
		quiz.speakWord();
		spellZone.requestFocus();
	}

	/**
	 * Method to handle when a user wants to go back to the main menu.
	 * @param ae action event generated by button being clicked.
	 */
	@FXML
	public void handleMainMenuPressed(ActionEvent ae){
		Stage primaryStage = VoxSpell.getMainStage();
		try {
			Parent root = FXMLLoader.load(getClass().getResource("MainMenu.fxml"));
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			primaryStage.show();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/*	
	 * Helper method to be used whenever you want a user to check if what they entered in the TextField
	 * is correct.
	 */
	private void submit(String answer){
		int result = quiz.compare(answer);
		if(result == DummyQuiz.CORRECT_FIRST_TRY || result == DummyQuiz.CORRECT_SECOND_TRY){
			wordUpTo++;
			incorrect.setVisible(false);
			correct.setVisible(true);
			score++;
			streak++;
		}else if(result == NewQuiz.WRONG_LAST_TRY){
			if(streak > highStreak){
				highStreak = streak;
			}
			streak = 0;
			correct.setVisible(false);
			incorrect.setVisible(true);
			wordUpTo++;
		}else if(result == NewQuiz.WRONG_STILL_TRYING){
			if(streak > highStreak){
				highStreak = streak;
			}
			streak = 0;
			correct.setVisible(false);
			incorrect.setVisible(true);
		}
		spellZone.setText("");
		progressLabel.setText("Word " + wordUpTo + "/10");
		previousEnterLabel.setText("You entered: " + answer);
		scoreLabel.setText("Score: " + score);
		streakLabel.setText("Streak: " + streak);
		if(quiz.isEnded()){
			endTime = System.currentTimeMillis();
			results = quiz.getResults();
			results.setTimeTaken(endTime - startTime);
			if(highStreak == 0){
				highStreak = streak;
			}
			results.setBestStreak(highStreak);
			results.setScore(score);
			results.setLevel(quiz.getLevel());
			results.setNumWords(quiz.size());
			
			//Load next screen and pass information to controller
			Stage primaryStage = VoxSpell.getMainStage();
			try {
				FXMLLoader loader = new FXMLLoader();
				Parent root = loader.load(getClass().getResource("ScoreSummary.fxml").openStream());
				SummaryScreenController controller = (SummaryScreenController)loader.getController();
				//Parent root = FXMLLoader.load(getClass().getResource("ScoreSummary.fxml"));
				controller.setResults(results);
				Scene scene = new Scene(root);
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch (IOException e) {
				e.printStackTrace();
			}
			
		}else{
			quiz.speakWord();
		}
	}

	
	/**
	 * Called by JavaFX framework to set up controller.
	 */
	@FXML
	public void initialize(){
		quizTypeLabel.setText("Quiz: DummyQuiz");
		//TODO: Check level
		levelLabel.setText("Level: 1");
		wordUpTo = 0;
		//TODO should the progress label even be visible before a quiz starts?
		progressLabel.setText("Word 0/10");
		score = 0;
		streak = 0;
		QuizRules rules = QuizRules.getInstance();
		quizTypeLabel.setText(rules.getQuizType());
		String listLocation = rules.getWordListLocation();
		String[] path = listLocation.split("/");
		String basename = path[path.length-1];
		spellListLabel.setText(basename);
	}
	
}
